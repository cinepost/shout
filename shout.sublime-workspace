{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"st",
				"string"
			],
			[
				"sc",
				"scene_io_registry"
			],
			[
				"IO",
				"SCN_IFDTranslator"
			],
			[
				"srt",
				"string"
			],
			[
				"SCN",
				"SCN_IOTranslator"
			],
			[
				"io",
				"io_registry"
			],
			[
				"r",
				"return"
			],
			[
				"S",
				"SCN_IOTranslator"
			],
			[
				"R",
				"RendererOpenGL"
			],
			[
				"w",
				"width"
			],
			[
				"scne",
				"scene_files"
			],
			[
				"Ri",
				"Ri_Module"
			],
			[
				"re",
				"renderer"
			],
			[
				"Sce",
				"Scene_Reader"
			],
			[
				"n",
				"name"
			],
			[
				"in",
				"int"
			],
			[
				"if",
				"iface"
			],
			[
				"RIB",
				"RIB_File_Interface"
			],
			[
				"file",
				"filename"
			],
			[
				"ri",
				"riDisplay"
			],
			[
				"glam",
				"glman_for_python"
			],
			[
				"a",
				"array_float"
			],
			[
				"arr",
				"array_int"
			],
			[
				"floatn",
				"floatnum"
			],
			[
				"rib_a",
				"rib_attribute_end"
			],
			[
				"read",
				"readed_line"
			],
			[
				"line",
				"line_buff"
			],
			[
				"lin",
				"line_buff"
			],
			[
				"Wo",
				"WorldEnd"
			],
			[
				"W",
				"WorldBegin"
			],
			[
				"Op",
				"Opacity"
			],
			[
				"Fr",
				"Format"
			],
			[
				"flo",
				"floatnum3"
			],
			[
				"float",
				"floatnum"
			],
			[
				"rib",
				"rib_display"
			],
			[
				"floa",
				"floatnum"
			],
			[
				"floatnum",
				"floatnum3"
			],
			[
				"Co",
				"Combine"
			],
			[
				"fl",
				"floatnum"
			],
			[
				"log",
				"logger"
			],
			[
				"nod",
				"node_path"
			],
			[
				"pa",
				"panelMgr2"
			],
			[
				"ma",
				"maximizePanelManager"
			],
			[
				"hi",
				"historyIndex"
			],
			[
				"_",
				"_bgeo_parser"
			],
			[
				"Pa",
				"ParserBGEO"
			],
			[
				"set",
				"setResultsName"
			],
			[
				"sce",
				"scene_parser"
			],
			[
				"do",
				"do_world_end"
			],
			[
				"ray",
				"ray_version"
			],
			[
				"ray_de",
				"ray_detail_1"
			],
			[
				"do_",
				"do_ray_declare"
			],
			[
				"ifd",
				"ifd_grammar"
			],
			[
				"parse",
				"parseString"
			],
			[
				"One",
				"OneOrMore"
			],
			[
				"_re",
				"_renderer"
			],
			[
				"scen",
				"scene_filename"
			],
			[
				"scene",
				"scene_ext"
			],
			[
				"mim",
				"mime_type"
			],
			[
				"de",
				"default"
			],
			[
				"des",
				"description"
			],
			[
				"add",
				"add_subparsers"
			],
			[
				"p",
				"printables"
			],
			[
				"ray_deta",
				"ray_detail_1"
			],
			[
				"HOM",
				"HOM_Point"
			],
			[
				"H",
				"HOM_Point"
			],
			[
				"OP",
				"OP_Node"
			],
			[
				"en",
				"engine"
			],
			[
				"geo",
				"geometry"
			],
			[
				"HOU_",
				"HOU_Vector3"
			],
			[
				"vector",
				"vector3d"
			],
			[
				"vect",
				"vector3d"
			],
			[
				"setPosition_from",
				"Point_setPosition_from_Vector3"
			],
			[
				"inc",
				"include"
			],
			[
				"pare",
				"parent_node"
			],
			[
				"make",
				"make_tuple"
			],
			[
				"geome",
				"geometries"
			],
			[
				"num",
				"numPoints"
			],
			[
				"cre",
				"createPoint"
			],
			[
				"GEo",
				"Geometry_points"
			],
			[
				"Vec",
				"Vector2"
			],
			[
				"VE",
				"Vector2__repr__"
			],
			[
				"export_Vec",
				"export_Vector2"
			],
			[
				"export",
				"export_Geometry"
			],
			[
				"h",
				"h"
			],
			[
				"new",
				"newGeometry"
			],
			[
				"no",
				"no_init"
			],
			[
				"ret",
				"return_value_policy"
			],
			[
				"_registry",
				"_registry_by_mime"
			],
			[
				"__",
				"__base__"
			],
			[
				"box",
				"box_frame"
			],
			[
				"bo",
				"boundingRect"
			],
			[
				"tick",
				"tick_height"
			],
			[
				"evalAs",
				"evalAsString"
			],
			[
				"_p",
				"_pt_index"
			],
			[
				"bui",
				"buildFromSOP"
			],
			[
				"pol",
				"poly_indices"
			],
			[
				"view",
				"views_layout"
			],
			[
				"delete",
				"delete_widgets"
			],
			[
				"vie",
				"viewports"
			],
			[
				"s",
				"self"
			],
			[
				"views",
				"views_layout"
			],
			[
				"clear",
				"clearLayout"
			],
			[
				"share",
				"share_widget"
			],
			[
				"Qt",
				"QtOpenGL"
			],
			[
				"la",
				"layout_name"
			],
			[
				"poly",
				"_poly_count"
			],
			[
				"_po",
				"_poly_count"
			],
			[
				"_pol",
				"_poly_indices_vbo"
			],
			[
				"obj",
				"ogl_obj_cache"
			],
			[
				"divs",
				"divsx"
			],
			[
				"Po",
				"Point"
			],
			[
				"prim",
				"primType"
			],
			[
				"parm",
				"parm_template"
			],
			[
				"class",
				"classmethod"
			],
			[
				"size",
				"sizez"
			],
			[
				"half",
				"halfz"
			],
			[
				"ha",
				"halfy"
			],
			[
				"d",
				"divsy"
			],
			[
				"displ",
				"display_node"
			],
			[
				"dis",
				"distanceFromTarget"
			],
			[
				"len",
				"length"
			],
			[
				"ob",
				"obj_cache"
			],
			[
				"is",
				"isGuiMode"
			],
			[
				"node_",
				"node_path"
			],
			[
				"node",
				"node_name"
			],
			[
				"end",
				"endl"
			],
			[
				"name",
				"name_string"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/shout_lib/SCN/SCN_IFDTranslator.cpp",
			"settings":
			{
				"buffer_size": 899,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/shout_lib/SCN/SCN_IFDTranslator.h",
			"settings":
			{
				"buffer_size": 974,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/shout_lib/SCN/SCN_IOTranslator.cpp",
			"settings":
			{
				"buffer_size": 117,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/shout_lib/SCN/SCN_IOTranslator.h",
			"settings":
			{
				"buffer_size": 793,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/shout_cmd/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 546,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/shout_lib/renderer.cpp",
			"settings":
			{
				"buffer_size": 311,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/shout_lib/CMakeLists.txt",
			"settings":
			{
				"buffer_size": 2651,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "CMakeLists.txt",
			"settings":
			{
				"buffer_size": 1459,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/shout_lib/display.cpp",
			"settings":
			{
				"buffer_size": 1234,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/shout_lib/SCN/SCN_Scene.cpp",
			"settings":
			{
				"buffer_size": 24,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/shout_lib/SCN/SCN_IORegistry.cpp",
			"settings":
			{
				"buffer_size": 310,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/shout_lib/SCN/SCN_IORegistry.h",
			"settings":
			{
				"buffer_size": 546,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/copper_lib/SYS/SYS_Compiler.h",
			"settings":
			{
				"buffer_size": 288,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/copper_lib/SYS/SYS_Types.h",
			"settings":
			{
				"buffer_size": 886,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/shout_lib/SCN/SCN_Scene.h",
			"settings":
			{
				"buffer_size": 1049,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/shout_lib/renderer_opengl.cpp",
			"settings":
			{
				"buffer_size": 1383,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "#include \"renderer.h\""
			}
		},
		{
			"contents": "#include <boost/log/core.hpp>\n#include <boost/log/trivial.hpp>\n#include <boost/log/expressions.hpp>\n#include <boost/program_options.hpp>\n#include <boost/algorithm/string/join.hpp>\nnamespace po = boost::program_options;\n\n#include <fstream>\n#include <istream>\n#include <iostream>\n#include <string>\n#include <csignal>\n#include <cstdlib>\n\n//#include \"antlr4-runtime.h\"\n//#include \"IFDLexer.h\"\n//#include \"IFDParser.h\"\n\n#include <shout_lib/SCN/SCN_IORegistry.h>\n#include <shout_lib/SCN/SCN_IFDTranslator.h>\n\n#include <shout_lib/SCN/SCN_Scene.h>\n#include \"../shout_lib/renderer.h\"\n#include \"../shout_lib/renderer_opengl.h\"\n\nnamespace logging = boost::log;\n\nusing namespace std;\n//using namespace antlr4;\n\n\nvoid signalHandler( int signum ){\n    std::cerr << \"Interrupt signal (\" << signum << \") received.\" << std::endl;\n\n    // cleanup and close up stuff here  \n    // terminate program  \n   exit(signum);  \n}\n\n\n// A helper function to simplify the main part.\ntemplate<class T>\nostream& operator<<(ostream& os, const vector<T>& v)\n{\n    copy(v.begin(), v.end(), ostream_iterator<T>(os, \" \")); \n    return os;\n}\n\n\nint main(int argc, char **argv) {\n\tlogging::core::get()->set_filter(\n    \tlogging::trivial::severity >= logging::trivial::debug\n  \t);\n\n\tsignal(SIGTERM, signalHandler);\n\tsignal(SIGABRT, signalHandler);\n\n  try { \n    int opt;\n    string config_file;\n\n    // Declare a group of options that will be allowed only on command line\n    namespace po = boost::program_options; \n    po::options_description generic(\"Options\"); \n    generic.add_options() \n      (\"help,h\", \"Print help messages\") \n      (\"version,v\", \"Shout version information\")\n      ;\n\n    // Declare a group of options that will be allowed both on command line and in config file\n    po::options_description config(\"Configuration\");\n    config.add_options()\n        (\"optimization\", po::value<int>(&opt)->default_value(10), \n              \"optimization level\")\n        (\"include-path,I\", \n             po::value< vector<string> >()->composing(), \n             \"include path\")\n        ;\n\n    // Hidden options, will be allowed both on command line and in config file, but will not be shown to the user.\n    po::options_description hidden(\"Hidden options\");\n    hidden.add_options()\n        (\"input-file\", po::value< vector<string> >(), \"input file\")\n        ;\n\n    po::options_description cmdline_options;\n    cmdline_options.add(generic).add(config).add(hidden);\n\n    po::options_description config_file_options;\n    config_file_options.add(config).add(hidden);\n\n    po::options_description visible(\"Allowed options\");\n    visible.add(generic).add(config);\n\n    po::positional_options_description p;\n    p.add(\"input-file\", -1);\n \n    po::variables_map vm; \n    po::store(po::command_line_parser(argc, argv).\n      options(cmdline_options).positional(p).run(), vm); // can throw \n    po::notify(vm); // throws on error, so do after help in case there are any problems\n\n    /** --help option \n     */ \n    if ( vm.count(\"help\")  ) { \n\t\tcout << \"Basic Command Line Parameter App\\n\" << generic << endl; \n\t\texit(EXIT_SUCCESS);\n    }\n\n    if (vm.count(\"version\")) {\n\t\tcout << \"Shout, version 0.0\\n\";\n\t\texit(EXIT_SUCCESS);\n    }\n\n    // Handle config file\n    ifstream ifs(config_file.c_str());\n    if (!ifs) {\n        BOOST_LOG_TRIVIAL(debug) << \"No config file provided but that's totally fine.\" << config_file << \"\\n\";\n    } else {\n        store(parse_config_file(ifs, config_file_options), vm);\n        notify(vm);\n    }\n\n    // Populate IO_Registry with internal and external scene translators\n    SCN_IORegistry scene_io_registry;\n\n    scene_io_registry.addIOTranslator(\n        SCN_IFDTranslator::myExtensions, \n        SCN_IFDTranslator::myConstructor\n    );\n\n    SCN_Scene scene;\n    SCN_IOTranslator *translator = 0;\n    Renderer  *renderer = 0;\n\n    renderer = new RendererOpenGL();\n\n    if (vm.count(\"input-file\")) {\n      // loading provided files\n      vector<string> files = vm[\"input-file\"].as< vector<string> >();\n      BOOST_LOG_TRIVIAL(debug) << \"Input scene files are: \"<< boost::algorithm::join(files, \" \") << \"\\n\";\n      for (vector<string>::const_iterator fi = files.begin(); fi != files.end(); ++fi) {\n        std::ifstream in_file(*fi);\n        if ( in_file )\n        {\n          translator = scene_io_registry.getTranslatorByExt(\"ifd\");\n          if (!translator->fileLoad(&scene, in_file, false)) {\n            // error loading scene from file\n            BOOST_LOG_TRIVIAL(error) << \"Error loading scene from file \" << *fi;\n          }\n        } else {\n          // error opening scene file\n          std::cerr << \"Unable to open file \" << *fi << \" ! aborting...\" << std::endl;\n        }\n      }\n    } else {\n      // loading from stdin\n      BOOST_LOG_TRIVIAL(debug) << \"Reading scene from stdin ...\\n\";\n      translator = scene_io_registry.getTranslatorByExt(\"ifd\");\n      if (!translator->fileLoad(&scene, std::cin, false)) {\n        // error loading scene from stdin\n        BOOST_LOG_TRIVIAL(error) << \"Error loading scene from stdin !\";\n      }\n    }\n    if(translator)delete translator;\n    if(renderer)delete renderer;\n  } \n  catch(exception& e) \n  { \n  \t// Unhandled exception reached top of main\n    BOOST_LOG_TRIVIAL(error) << \"Unhandled Exception: \" << e.what(); \n    exit(EXIT_FAILURE);\n  }\n\n  BOOST_LOG_TRIVIAL(info) << \"All done! Bye ;)\";\n  exit(EXIT_SUCCESS);\n}",
			"file": "src/shout_cmd/shout_cmd.cpp",
			"file_size": 5364,
			"file_write_time": 131837430621088381,
			"settings":
			{
				"buffer_size": 5364,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/shout_lib/utils.h",
			"settings":
			{
				"buffer_size": 127,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "#ifndef DERIVEDCLASS_H"
			}
		},
		{
			"file": "src/shout_lib/utils.cpp",
			"settings":
			{
				"buffer_size": 423,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "#include <string>"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 199.0,
		"history":
		[
			"h",
			"help",
			"exit()",
			"ls"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/max/dev/shout/src",
		"/Users/max/dev/shout/src/copper_lib",
		"/Users/max/dev/shout/src/copper_lib/OP",
		"/Users/max/dev/shout/src/copper_lib/SYS",
		"/Users/max/dev/shout/src/shout_cmd",
		"/Users/max/dev/shout/src/shout_lib",
		"/Users/max/dev/shout/src/shout_lib/SCN"
	],
	"file_history":
	[
		"/Users/max/dev/Copperfield_FX/bin/copper",
		"/Users/max/dev/Copperfield_FX/gui/main_window.py",
		"/Users/max/dev/Copperfield_FX/gui/panels/scene_view_panel/scene_view_panel.py",
		"/Users/max/dev/Copperfield_FX/copper/geometry/geometry.py",
		"/Users/max/dev/shout/src/shout_lib/SCN/SCN_IOTranslator.cpp",
		"/Users/max/dev/shout/src/shout_cmd/CMakeLists.txt",
		"/Users/max/dev/shout/src/shout_lib/CMakeLists.txt",
		"/Users/max/dev/shout/src/display_sdl.h",
		"/Users/max/dev/shout/src/display_sdl.cpp",
		"/Users/max/dev/shout/cmake/ExternalAntlr4Cpp.cmake",
		"/Users/max/dev/shout/src/shout_cmd/shout_cmd.cpp",
		"/Users/max/dev/glman/CMakeLists.txt",
		"/Users/max/dev/glman/src/glman_lib/CMakeLists.txt",
		"/Users/max/dev/glman/src/glman_cmd/CMakeLists.txt",
		"/Users/max/dev/glman/src/glman_for_python/CMakeLists.txt",
		"/Users/max/dev/shout/src/CMakeLists.txt",
		"/Users/max/dev/shout/src/shout_lib/display.h",
		"/Users/max/dev/shout/src/shout_lib/display.cpp",
		"/Users/max/dev/glman/src/glman_lib/loaders/rib_loader.cpp",
		"/Users/max/dev/shout/CMakeLists.txt",
		"/Users/max/dev/shout/src/shout.cpp",
		"/Users/max/dev/glman/src/glman_cmd/glman_cmd.cpp",
		"/Users/max/Downloads/IFDLexer.h",
		"/Users/max/Downloads/IFDVisitor.h",
		"/Users/max/Downloads/IFDBaseVisitor.h",
		"/Users/max/Downloads/IFDParser.h",
		"/Users/max/dev/glman/tests/scenes/test.ifd",
		"/Users/max/dev/nexen/src/rop/CMakeLists.txt",
		"/Users/max/dev/nexen/src/rop/rop_nxn.cpp",
		"/Users/max/dev/nexen/CMakeLists.txt",
		"/Users/max/dev/nexen/src/rop/rop_nxn.h",
		"/Users/max/dev/glman/src/glman_lib/parsers/rib_parser.h",
		"/Users/max/dev/glman/src/glman_lib/renderer.cpp",
		"/Users/max/dev/glman/src/glman_lib/display.cpp",
		"/Users/max/dev/glman/include/glman_lib/interfaces/rib_file_interface.h",
		"/Users/max/dev/glman/include/glman_lib/interfaces/rib_rendering_interface.h",
		"/Users/max/dev/glman/src/glman_for_python/RiModule.cpp",
		"/Users/max/dev/glman/src/glman_for_python/glman_for_python.cpp",
		"/Users/max/dev/glman/src/glman_lib/Renderer.cpp",
		"/Users/max/dev/glman/src/glman_lib/Display.cpp",
		"/Users/max/dev/glman/src/glman_lib/interfaces/ifd_interface.cpp",
		"/Users/max/dev/glman/include/glman/loaders/rib_loader.h",
		"/Users/max/dev/glman/src/glman_lib/RIB_Rendering_Interface.cpp",
		"/Users/max/dev/glman/notes",
		"/Users/max/dev/glman/tests/scenes/pacman.rib",
		"/Users/max/dev/glman/include/glman/Display.h",
		"/Users/max/dev/glman/include/glman/RIB_Rendering_Interface.h",
		"/Users/max/dev/glman/src/glman_lib/IFD_Interface.cpp",
		"/Users/max/dev/glman/include/glman/IFD_Interface.h",
		"/Users/max/dev/glman/include/glman/RIB_File_Interface.h",
		"/Users/max/dev/glman/src/glman_lib/RIB_File_Interface.cpp",
		"/Users/max/dev/Copperfield_FX/test/mantra/test.rib",
		"/Users/max/dev/glman/include/glman/Scene_Reader.h",
		"/Users/max/dev/glman/src/glman_lib/Scene_Reader.cpp",
		"/Users/max/dev/CopperFX/src/copper_pymodule/HOM_Geometry.cpp",
		"/Users/max/dev/CopperFX/src/copper_pymodule/HOM_Module.cpp",
		"/Users/max/dev/CopperFX/include/copper/HOM/HOM_Module.h",
		"/Users/max/dev/CopperFX/src/copper_pymodule/HOM_Node.cpp",
		"/Users/max/dev/CopperFX/include/copper/HOM/HOM_Node.h",
		"/Users/max/dev/glman/include/glman/Renderer.h",
		"/Users/max/dev/glman/include/glman/ri.h",
		"/Users/max/dev/glman/python/glman_for_python/prman.py",
		"/Users/max/dev/CopperFX/CMakeLists.txt",
		"/Users/max/dev/glman/include/glman/RibInterface.h",
		"/Users/max/dev/glman/src/glman_lib/RibInterface.cpp",
		"/Users/max/Downloads/patch-FindBoost.cmake",
		"/Users/max/dev/Copperfield_FX/copper/shout/parsers/ifd/parser_ifd.py",
		"/Users/max/dev/Copperfield_FX/test/mantra/cornell-box.rib",
		"/Users/max/dev/Copperfield_FX/copper/shout/parsers/rib/parser_rib.py",
		"/Users/max/dev/Copperfield_FX/copper/shout/parsers/base.py",
		"/Users/max/dev/Copperfield_FX/copper/shout/shout.py",
		"/Users/max/Downloads/gaffer-0.48.0.0-osx/startup/gui/viewer.py",
		"/Users/max/Downloads/gaffer-0.48.0.0-osx/apps/gui/gui-1.py",
		"/Users/max/Downloads/gaffer-0.48.0.0-osx/bin/gaffer.py",
		"/Users/max/Downloads/gaffer-0.48.0.0-osx/bin/gaffer",
		"/Users/max/Downloads/EFI/CLOVER/config.plist",
		"/Users/max/Documents/stor1.htzr.s4account",
		"/Users/max/htzr.ovpn",
		"/Users/max/htzr_hosta01.ovpn",
		"/Users/max/htzr_stor1.ovpn",
		"/Users/max/dev/Copperfield_FX/test/mantra/test.ifd",
		"/Users/max/dev/Copperfield_FX/gui/panels/network_view_panel.py",
		"/Users/max/dev/Copperfield_FX/copper/shout/parsers/ifd/parser_bgeo.py",
		"/Users/max/dev/Copperfield_FX/copper/op/op_network.py",
		"/Users/max/dev/Copperfield_FX/copper/vmath/vector3.py",
		"/Users/max/dev/Copperfield_FX/gui/panels/tree_view_panel.py",
		"/Users/max/dev/Copperfield_FX/gui/panels/scene_view_panel/ogl_objcache.py",
		"/Users/max/dev/Copperfield_FX/gui/panels/parameters_panel/parameters_widgets.py",
		"/Users/max/dev/Copperfield_FX/gui/panels/parameters_panel/parameters_panel.py",
		"/Users/max/dev/Copperfield_FX/gui/widgets/path_bar_widget.py",
		"/Users/max/dev/Copperfield_FX/gui/panels/composite_view_panel.py",
		"/Users/max/dev/Copperfield_FX/copper/op/op_cooking_queue.py",
		"/Users/max/dev/Copperfield_FX/copper/op/op_base.py",
		"/Users/max/dev/Copperfield_FX/copper/op/base.py",
		"/Users/max/dev/Copperfield_FX/gui/panels/python_shell_panel.py",
		"/Users/max/dev/Copperfield_FX/gui/panels/python_syntax_highlighter.py",
		"/Users/max/dev/Copperfield_FX/gui/tabbed_panel_manager.py",
		"/Users/max/dev/Copperfield_FX/gui/panels/help_browser_panel.py",
		"/Users/max/dev/Copperfield_FX/gui/widgets/collapsable_widget.py",
		"/Users/max/dev/Copperfield_FX/gui/widgets/play_bar_widget/time_line.py",
		"/Users/max/dev/Copperfield_FX/gui/signals.py",
		"/Users/max/dev/Copperfield_FX/gui/widgets/play_bar_widget/play_bar_widget.py",
		"/Users/max/dev/Copperfield_FX/gui/widgets/play_bar_widget/__init__.py",
		"/Users/max/dev/Copperfield_FX/gui/widgets/__init__.py",
		"/Users/max/dev/Copperfield_FX/gui/dialogs/render_node_dialog.py",
		"/Users/max/dev/Copperfield_FX/gui/dialogs/__init__.py",
		"/Users/max/dev/Copperfield_FX/gui/panels/parameters_panel/__init__.py",
		"/Users/max/dev/Copperfield_FX/gui/panels/panel_registry.py",
		"/Users/max/dev/Copperfield_FX/gui/panels/base_panel.py",
		"/Users/max/dev/Copperfield_FX/gui/utils.py",
		"/Users/max/dev/Copperfield_FX/gui/panels/__init__.py",
		"/Users/max/dev/Copperfield_FX/copper/settings.py",
		"/Users/max/dev/Copperfield_FX/copper/op/node_type_category.py",
		"/Users/max/dev/Copperfield_FX/copper/op/node_type.py",
		"/Users/max/dev/Copperfield_FX/copper/vmath/matrix4.py",
		"/Users/max/dev/Copperfield_FX/copper/translators.py",
		"/Users/max/dev/Copperfield_FX/copper/managers/cop_network.py",
		"/Users/max/dev/Copperfield_FX/copper/managers/obj_network.py",
		"/Users/max/dev/Copperfield_FX/copper/managers/rop_network.py",
		"/Users/max/dev/Copperfield_FX/copper/managers/__init__.py",
		"/Users/max/dev/Copperfield_FX/copper/op/op_engine.py",
		"/Users/max/dev/Copperfield_FX/copper/utils/decorators.py",
		"/Users/max/dev/Copperfield_FX/copper/geometry/iotranslators/bgeo/__init__.py",
		"/Users/max/dev/Copperfield_FX/copper/geometry/iotranslators/base.py",
		"/Users/max/dev/Copperfield_FX/copper/geometry/iotranslators/obj/__init__.py",
		"/Users/max/dev/Copperfield_FX/copper/sop/sop_node.py",
		"/Users/max/dev/Copperfield_FX/copper/cop2/cop2_blur.py",
		"/Users/max/dev/Copperfield_FX/copper/cop2/cop2_node.py"
	],
	"find":
	{
		"height": 24.0
	},
	"find_in_files":
	{
		"height": 101.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"Scene"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"SCN_Scene"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 11,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/shout_lib/SCN/SCN_IFDTranslator.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 899,
						"regions":
						{
						},
						"selection":
						[
							[
								119,
								119
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/shout_lib/SCN/SCN_IFDTranslator.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 974,
						"regions":
						{
						},
						"selection":
						[
							[
								854,
								854
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/shout_lib/SCN/SCN_IOTranslator.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 117,
						"regions":
						{
						},
						"selection":
						[
							[
								94,
								94
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/shout_lib/SCN/SCN_IOTranslator.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 793,
						"regions":
						{
						},
						"selection":
						[
							[
								758,
								758
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/shout_cmd/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 546,
						"regions":
						{
						},
						"selection":
						[
							[
								223,
								223
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/shout_lib/renderer.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 311,
						"regions":
						{
						},
						"selection":
						[
							[
								81,
								81
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/shout_lib/CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2651,
						"regions":
						{
						},
						"selection":
						[
							[
								1074,
								1099
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 234.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1459,
						"regions":
						{
						},
						"selection":
						[
							[
								1338,
								1338
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/shout_lib/display.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1234,
						"regions":
						{
						},
						"selection":
						[
							[
								982,
								993
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "src/shout_lib/SCN/SCN_Scene.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24,
						"regions":
						{
						},
						"selection":
						[
							[
								22,
								22
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "src/shout_lib/SCN/SCN_IORegistry.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 310,
						"regions":
						{
						},
						"selection":
						[
							[
								196,
								196
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "src/shout_lib/SCN/SCN_IORegistry.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 546,
						"regions":
						{
						},
						"selection":
						[
							[
								489,
								511
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "src/copper_lib/SYS/SYS_Compiler.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 288,
						"regions":
						{
						},
						"selection":
						[
							[
								263,
								263
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "src/copper_lib/SYS/SYS_Types.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 886,
						"regions":
						{
						},
						"selection":
						[
							[
								67,
								67
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "src/shout_lib/SCN/SCN_Scene.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1049,
						"regions":
						{
						},
						"selection":
						[
							[
								164,
								164
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "src/shout_lib/renderer_opengl.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1383,
						"regions":
						{
						},
						"selection":
						[
							[
								1260,
								1326
							]
						],
						"settings":
						{
							"auto_name": "#include \"renderer.h\"",
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "src/shout_cmd/shout_cmd.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5364,
						"regions":
						{
						},
						"selection":
						[
							[
								5267,
								5286
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1793.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "src/shout_lib/utils.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 127,
						"regions":
						{
						},
						"selection":
						[
							[
								60,
								60
							]
						],
						"settings":
						{
							"auto_name": "#ifndef DERIVEDCLASS_H",
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "src/shout_lib/utils.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 423,
						"regions":
						{
						},
						"selection":
						[
							[
								57,
								57
							]
						],
						"settings":
						{
							"auto_name": "#include <string>",
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 24.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 25.0
	},
	"pinned_build_system": "",
	"project": "shout.sublime-project",
	"replace":
	{
		"height": 44.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 257.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
